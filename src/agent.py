from abc import ABC, abstractmethod
import random as rd

STANDARD_GAME_PROMPT = "You are a competitive game player. Make sure you read the game instructions carefully, and always follow the required format."

class Agent(ABC):
    """ Generic agent class that defines the basic structure of an agent """
    @abstractmethod
    def __call__(self, observation: str) -> list[str]:
        """
        Process the observation and return the action.

        Args:
            observation (str): The input string to process.

        Returns:
            str: The response generated by the agent.
        """
        pass

    def extractMoves(self, observation: str) -> list[str]:
        moveList = []
        i = len(observation) - 1        #starts from the back

        while i >= 0 and observation[i] != ':':
            i -= 1                     #find the colon that signals the beginning of move list
        if i <= 0:                     # <- shouldn't ever happen
            return ["exit"]             #quits game

        """now it just extracts everything after the colon 
        by checking if it is within brackets or not"""
        moves_str = observation[i+1:].strip()

        current_move = ''
        in_bracket = False
        for char in moves_str:           #goes through the new string and picks out items in bracks
            if char == '[':
                current_move = ''
                in_bracket == True
                continue
            elif char == ']':
                in_bracket == False
                moveList.append(current_move.strip()) #appends them to move list
                continue
            elif in_bracket == True:
                current_move += char

        # if moveList == []:
        #     return "exit"
        return moveList

class LLMAgent(Agent):
    def __init__(self, model_name: str, device: str = "auto", quantize: bool = False, max_new_tokens: int = 1024,
                 hf_kwargs: dict = None,):
        """
        Initialize the Hugging Face local agent.
        
        Args:
            model_name (str): The name of the model.
            device (str): Device to use for model inference (default: "auto").
            quantize (bool): Whether to load the model in 8-bit quantized format (default: False).
        """
        super().__init__()
        
        try:
            from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM
        except ImportError:
            raise ImportError("Transformers library is required. Install it with: pip install transformers")
            
        ## Initialize the Hugging Face model and tokenizer
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        if quantize: self.model = AutoModelForCausalLM.from_pretrained(model_name, load_in_8bit=True, device_map=device, **hf_kwargs)
        else: self.model = AutoModelForCausalLM.from_pretrained(model_name, device_map=device, **hf_kwargs)
        self.system_prompt = STANDARD_GAME_PROMPT
        self.pipeline = pipeline('text-generation', max_new_tokens=max_new_tokens, model=self.model, tokenizer=self.tokenizer) ## Initialize the Hugging Face pipeline
    
    def __call__(self, observation: str) -> list:
        """
        Process the observation using the Hugging Face model and return the action.
        
        Args:
            observation (str): The input string to process.
        
        Returns:
            str: The response generated by the model.
        """
        try: # Generate a response
            response = self.pipeline(self.system_prompt+"\n"+observation, num_return_sequences=1, return_full_text=False)
            action = [response[0]['generated_text'].strip(),"test ai response"] # Extract and return the text output
            return action
        except Exception as e:
            return [f"An error occurred: {e}"]

class RandomAgent(Agent):
    """This one is added
    its just a random choice bot so I dont know how it will perform in 'day discussion'"""
    def __init__(self):
        super().__init__()


    """call function needs a list of allowed responses
    then it random choices it and spits one out
    for discussions it can just say something basic like "Im a bot" if a response is reqd"""
    def __call__(self, observation: str) -> list[str]:
        moveList = self.extractMoves(observation)        #defined in the abstract "Agent" class
        return [rd.choice(moveList)]


class HumanAgent(Agent):
    """ Human agent class that allows the user to input actions manually """
    def __init__(self):
        super().__init__()

    def __call__(self, observation: str) -> list[str]:
        """
        Process the observation and return the action.
        
        Args:
            observation (str): The input string to process.
            
        Returns:
            str: The response generated by the agent.
        """
        print("\n\n+++ +++ +++") # for easy visualization of what constitutes each turns observation
        return [ input(f"Current observations: {observation}\nPlease enter the action: "), "test response" ]
